-- CREATE DATABASE "aventurier";

BEGIN;
-- Création d'une transaction, c'est un groupe d' instruction SQL
-- qui rends celles-ci dépéndantes les unes des autres. 
-- Si au moins une des instructions génère une erreur, 
-- alors toutes les commandes sont invalidés

DROP TABLE IF EXISTS "city",
"colour",
"deck",
"game",
"hidden_deck",
"length",
"mission",
"player",
"route",
"type",
"user";

CREATE TABLE IF NOT EXISTS "city" (
  "id" integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- une clé primaire est automatiquement NOT NULL. Pas besoin de le préciser.
  "name" text NOT NULL,
  "player_id" integer,
  "created_at" timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
  "updated_at" timestamptz
);

CREATE TABLE IF NOT EXISTS "colour" (
 "id" integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name" text NOT NULL,
  "created_at" timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
  "updated_at" timestamptz
);

CREATE TABLE IF NOT EXISTS "deck" (
  "id" integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name" text NOT NULL,
  "blue" integer NOT NULL,
  "red" integer NOT NULL,
  "green" integer NOT NULL,
  "yellow" integer NOT NULL,
  "black" integer NOT NULL,
  "orange" integer NOT NULL,
  "white" integer NOT NULL,
  "pink" integer NOT NULL,
  "engine" integer NOT NULL,
  "created_at" timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
  "updated_at" timestamptz
);

CREATE TABLE IF NOT EXISTS "game" (
  "id" integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name" text NOT NULL,
  "save_date" timestamptz,
  "user_id" integer NOT NULL,
  "created_at" timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
  "updated_at" timestamptz
);

CREATE TABLE IF NOT EXISTS "hidden_deck" (
  "id" integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "colour_id" integer NOT NULL,
  "created_at" timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
  "updated_at" timestamptz
);

CREATE TABLE IF NOT EXISTS "length" (
  "id" integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "size" integer NOT NULL,
  "created_at" timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
  "updated_at" timestamptz
);

CREATE TABLE IF NOT EXISTS "mission" (
  "id" integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name" text NOT NULL,
  "points" integer NOT NULL,
  "player_id" integer,
  "player_id_1" integer,
  "city_id" integer NOT NULL,
  "city_id_1" integer NOT NULL,
  "created_at" timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
  "updated_at" timestamptz
);

CREATE TABLE IF NOT EXISTS "player" ( -- need to input all values when creating player
  "id" integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name" text NOT NULL,
  "colour_id" integer NOT NULL,
  "available_trains" integer NOT NULL,
  "available_stations" integer NOT NULL,
  "points" integer NOT NULL,
  "visited_countries" integer NOT NULL,
  "deck_id" integer NOT NULL,
  "game_id" integer NOT NULL,
  "created_at" timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
  "updated_at" timestamptz
);

CREATE TABLE IF NOT EXISTS "route" (
  "id" integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name" text NOT NULL,
  "type_id" integer NOT NULL,
  "length_id" integer NOT NULL,
  "colour_id" integer NOT NULL,
  "city_id" integer NOT NULL,
  "city_id_1" integer NOT NULL,
  "player_id" integer,
  "created_at" timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
  "updated_at" timestamptz
);

CREATE TABLE IF NOT EXISTS "type" (
  "id" integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name" text NOT NULL,
  "created_at" timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
  "updated_at" timestamptz
);

CREATE TABLE IF NOT EXISTS "user" (
  "id" integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name" text NOT NULL,
  "email" text NOT NULL,
  "password" text NOT NULL,
  "created_at" timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
  "updated_at" timestamptz
);

ALTER TABLE "city" ADD FOREIGN KEY ("player_id") REFERENCES "player" ("id"); -- player OWNS city
ALTER TABLE "game" ADD FOREIGN KEY ("user_id") REFERENCES "user" ("id"); -- user HOSTS game
ALTER TABLE "hidden_deck" ADD FOREIGN KEY ("colour_id") REFERENCES "colour" ("id"); -- card COLOURS
ALTER TABLE "mission" ADD FOREIGN KEY ("city_id_1") REFERENCES "city" ("id"); -- mission STARTS city
ALTER TABLE "mission" ADD FOREIGN KEY ("city_id") REFERENCES "city" ("id"); -- mission ENDS city
ALTER TABLE "mission" ADD FOREIGN KEY ("player_id_1") REFERENCES "player" ("id"); -- player TRIES mission
ALTER TABLE "mission" ADD FOREIGN KEY ("player_id") REFERENCES "player" ("id"); -- player COMPLETES mission
ALTER TABLE "player" ADD FOREIGN KEY ("colour_id") REFERENCES "colour" ("id"); -- player COLOURS
ALTER TABLE "player" ADD FOREIGN KEY ("game_id") REFERENCES "game" ("id"); -- player PLAYS game
ALTER TABLE "player" ADD FOREIGN KEY ("deck_id") REFERENCES "deck" ("id"); -- player HOLDS deck
ALTER TABLE "route" ADD FOREIGN KEY ("type_id") REFERENCES "type" ("id"); -- route TYPE
ALTER TABLE "route" ADD FOREIGN KEY ("length_id") REFERENCES "length" ("id"); -- route LENGTH
ALTER TABLE "route" ADD FOREIGN KEY ("colour_id") REFERENCES "colour" ("id"); -- route COLOURS
ALTER TABLE "route" ADD FOREIGN KEY ("city_id_1") REFERENCES "city" ("id"); -- route STARTS city
ALTER TABLE "route" ADD FOREIGN KEY ("city_id") REFERENCES "city" ("id"); -- route ENDS city
ALTER TABLE "route" ADD FOREIGN KEY ("player_id") REFERENCES "player" ("id"); -- player OWNS route

-- Pour mettre fin à au bloc de transaction et l'exécuter
COMMIT;